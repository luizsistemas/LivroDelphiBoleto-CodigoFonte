unit GeraBoleto.Banco001;

interface

uses GeraBoleto.Boleto, GeraBoleto.Base;

const
  NOME_BANCO = 'Banco do Brasil';
  DIGITO_NUM = '9';

type
  TFormata001 = class(TInterfacedObject, IFormatacao)
  private
    FBoleto: IBoleto;
  public
    constructor Create(ABoleto: IBoleto);
    procedure FormataCamposConta;
    procedure ValidaDados;
    procedure FormataCampoLivre;
  end;

  TFactoryBBFormata = class
  public
    class function GetFormatacaoCampoLivre(AConvenio: string): IFormataCampoLivre;
  end;

  TBBNossoNum11Posicoes = class(TInterfacedObject, IFormataCampoLivre)
  public
    procedure Formata(ABoleto: IBoleto);
  end;

  TBBNossoNum17Posicoes = class(TInterfacedObject, IFormataCampoLivre)
  public
    procedure Formata(ABoleto: IBoleto);
  end;


implementation

uses
  System.SysUtils, GeraBoleto.Funcoes;

function Modulo11BB(Valor: string; Base: Integer = 9): string;
var
  Soma: Integer;
  Contador, Peso, Resto: Integer;
begin
  Soma := 0;
  Peso := Base;
  for Contador := Length(Valor) downto 1 do
  begin
    Soma := Soma + (StrToInt(Valor[Contador]) * Peso);
    if Peso > 2 then
      Peso := Peso - 1
    else
      Peso := Base;
  end;
  Resto := Soma mod 11;
  if Resto = 10 then
    Result := 'X'
  else
    Result := IntToStr(Resto);
end;

{ TFactoryBBFormataNossoNumero }

class function TFactoryBBFormata.GetFormatacaoCampoLivre(AConvenio: string): IFormataCampoLivre;
begin
  case AConvenio.Length of
    4, 6: Result := TBBNossoNum11Posicoes.Create;
    7: Result := TBBNossoNum17Posicoes.Create;
  else
    raise Exception.Create('Convênio inválido!');
  end;
end;

{ TBBNossoNum11Posicoes }

procedure TBBNossoNum11Posicoes.Formata(ABoleto: IBoleto);
begin
  ABoleto.GetTitulo.NossoNum := ABoleto.GetConta.Convenio +
      LeftPad(ABoleto.GetConta.SeqNossoNumero.ToString, 11 - Length(ABoleto.GetConta.Convenio));

  ABoleto.GetTitulo.DigitoNossoNum := Modulo11BB(ABoleto.GetTitulo.NossoNum);

  ABoleto.SetCampoLivre( ABoleto.GetTitulo.NossoNum + ABoleto.GetConta.Agencia +
    ABoleto.GetConta.Conta + ABoleto.GetConta.Carteira );
end;

{ TBBNossoNum17Posicoes }

procedure TBBNossoNum17Posicoes.Formata(ABoleto: IBoleto);
begin
  ABoleto.GetTitulo.NossoNum := ABoleto.GetConta.Convenio +
      LeftPad(ABoleto.GetConta.SeqNossoNumero.ToString, 10);

  ABoleto.SetCampoLivre( LeftPad('0', 6) + ABoleto.GetTitulo.NossoNum + ABoleto.GetConta.Carteira );
end;

{ TFormata001 }

constructor TFormata001.Create(ABoleto: IBoleto);
begin
  FBoleto := ABoleto;
end;

procedure TFormata001.FormataCampoLivre;
begin
  TFactoryBBFormata.
    GetFormatacaoCampoLivre(FBoleto.GetConta.Convenio).
    Formata(FBoleto);
end;

procedure TFormata001.FormataCamposConta;
begin
  FBoleto.GetConta.Banco.Nome := NOME_BANCO;
  FBoleto.GetConta.Agencia := LeftPad(FBoleto.GetConta.Agencia, 4);
  FBoleto.GetConta.Conta := LeftPad(FBoleto.GetConta.Conta, 8);

end;

procedure TFormata001.ValidaDados;
begin
  if FBoleto.GetConta.Banco.DigitoNumero <> DIGITO_NUM then
    raise Exception.Create('Dígito do Número do Banco inválido!');
  if not IsNumber( FBoleto.GetConta.Conta ) then
    raise Exception.Create('Número da Conta inválido!');
  if not (FBoleto.GetConta.Carteira.Length = 2)  or
    not IsNumber(FBoleto.GetConta.Carteira) then
    raise Exception.Create('Carteira inválida!');
end;

end.
