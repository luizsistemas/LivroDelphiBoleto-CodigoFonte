unit Boleto001;

interface

uses Boleto, Pessoa, Conta, Titulo, Base;

const
  NUM_BANCO = '001';
  DIGITO_NUM = '9';

type
  TBBFormata = class(TInterfacedObject, IFormataBoletoBuilder)
  private
    FBoleto: IBoleto;
  public
    constructor Create(ABoleto: IBoleto);
    function FormataCampos: IFormataBoletoBuilder;
    function ValidaDados: IFormataBoletoBuilder;
    function FormataNossoNumero: IFormataBoletoBuilder;
    function FormataCampoLivre: IFormataBoletoBuilder;
    function FormataLinhaDigitavel: IFormataBoletoBuilder;
    function FormataCodigoBarras: IFormataBoletoBuilder;
    procedure Criar;
  end;

  TFactoryBBFormataNossoNumero = class
  public
    class function GetFormata(AConvenio: string): IFormataNossoNumero;
  end;

  TBBConvenio4 = class(TInterfacedObject, IFormataNossoNumero)
  public
    procedure Formata(ABoleto: IBoleto);
  end;

  TBBConvenio6 = class(TInterfacedObject, IFormataNossoNumero)
  public
    procedure Formata(ABoleto: IBoleto);
  end;

  TBBConvenio7 = class(TInterfacedObject, IFormataNossoNumero)
  public
    procedure Formata(ABoleto: IBoleto);
  end;

implementation

uses
  System.SysUtils, Funcoes;

{ TFactoryBBFormataNossoNumero }

class function TFactoryBBFormataNossoNumero.GetFormata(AConvenio: string): IFormataNossoNumero;
begin
  case AConvenio.Length of
    4: Result := TBBConvenio4.Create;
    6: Result := TBBConvenio6.Create;
    7: Result := TBBConvenio7.Create;
  else
    raise Exception.Create('Formato do Convênio não definido!');
  end;
end;

{ TBBConvenio4 }

procedure TBBConvenio4.Formata(ABoleto: IBoleto);
begin

end;

{ TBBConvenio6 }

procedure TBBConvenio6.Formata(ABoleto: IBoleto);
begin

end;

{ TBBConvenio7 }

procedure TBBConvenio7.Formata(ABoleto: IBoleto);
begin

end;

{ TBBFormata }

constructor TBBFormata.Create(ABoleto: IBoleto);
begin
  FBoleto := ABoleto;
end;

procedure TBBFormata.Criar;
begin

end;

function TBBFormata.FormataCampoLivre: IFormataBoletoBuilder;
begin

end;

function TBBFormata.FormataCampos: IFormataBoletoBuilder;
begin
  FBoleto.GetConta.Agencia := LeftPad(FBoleto.GetConta.Agencia, 4);
  FBoleto.GetConta.Conta := LeftPad(FBoleto.GetConta.Conta, 8);
  Result := Self;
end;

function TBBFormata.FormataCodigoBarras: IFormataBoletoBuilder;
begin

end;

function TBBFormata.FormataLinhaDigitavel: IFormataBoletoBuilder;
begin

end;

function TBBFormata.FormataNossoNumero: IFormataBoletoBuilder;
begin

end;

function TBBFormata.ValidaDados: IFormataBoletoBuilder;
begin
  if FBoleto.GetConta.Banco.Numero <> NUM_BANCO then
    raise Exception.Create('Número do Banco inválido!');
  if FBoleto.GetConta.Banco.DigitoNumero <> DIGITO_NUM then
    raise Exception.Create('Dígito do Número do Banco inválido!');
  if FBoleto.GetConta.DigitoAgencia.Length > 1 then
    raise Exception.Create('Dígito da Agência inválido!');
  if not IsNumber( FBoleto.GetConta.Conta ) then
    raise Exception.Create('Número da Conta inválido!');
  if FBoleto.GetConta.DigitoConta.Length > 1 then
    raise Exception.Create('Dígito da Conta inválido!');
  Result := Self;
end;

end.
