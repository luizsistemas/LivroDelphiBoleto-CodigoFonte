unit GeraBoleto.Base;

interface

uses GeraBoleto.Boleto, SysUtils, GeraBoleto.Funcoes,
  GeraBoleto.Conta, GeraBoleto.Titulo;

const
  MOEDA = '9';

type
  IFormataCampoLivre = interface
    ['{0AE09CA6-EE68-4985-9931-43A9B7ED4C18}']
    procedure Formata(ABoleto: IBoleto);
  end;

  IFormatacao = interface
    ['{0B519469-828E-45AB-8C2D-1553FEB7358B}']
    procedure FormataCamposConta;
    procedure ValidaDados;
    procedure FormataCampoLivre;
  end;

  IGeraBoletoBuilder = interface
    ['{3925CF8E-2080-4F5A-B42B-777CEB9EB8DD}']
    function FormataCampos: IGeraBoletoBuilder;
    function ValidaDados: IGeraBoletoBuilder;
    function FormataCampoLivre: IGeraBoletoBuilder;
    function FormataCodigoBarras: IGeraBoletoBuilder;
    function FormataLinhaDigitavel: IGeraBoletoBuilder;
    function Criar: Boolean;
  end;

  TGeraBoletoBuilder = class(TInterfacedObject, IGeraBoletoBuilder)
  private
    FCampoLivre: string;
    FBoleto: IBoleto;
    FConta: TConta;
    FTitulo: TTitulo;
    FormatadorBanco: IFormatacao;
  public
    constructor Create(ABoleto: IBoleto);
    function FormataCampos: IGeraBoletoBuilder;
    function ValidaDados: IGeraBoletoBuilder;
    function FormataCampoLivre: IGeraBoletoBuilder;
    function FormataLinhaDigitavel: IGeraBoletoBuilder;
    function FormataCodigoBarras: IGeraBoletoBuilder;
    function Criar: Boolean;
  end;


implementation

{ TBBFormata }

uses
  GeraBoleto.Factories;

constructor TGeraBoletoBuilder.Create(ABoleto: IBoleto);
begin
  FBoleto := ABoleto;
  FConta := FBoleto.GetConta;
  FTitulo := FBoleto.GetTitulo;
  FormatadorBanco := TFactoryBoleto.GetFormatter(ABoleto);
end;

function TGeraBoletoBuilder.Criar: Boolean;
begin
  Result := True;
end;

function TGeraBoletoBuilder.FormataCampos: IGeraBoletoBuilder;
begin
  FormatadorBanco.FormataCamposConta;
  Result := Self;
end;

function TGeraBoletoBuilder.FormataCodigoBarras: IGeraBoletoBuilder;
var
  CodigoBarras: string;
  DigitoCodBarra: string;
begin
  CodigoBarras := FConta.Banco.Numero + MOEDA + FatorVencimento(FTitulo.Vencto) +
    FormatFloat('0000000000', FTitulo.Valor * 100) + FBoleto.GetCampoLivre;
  DigitoCodBarra := CalcDigitoVerificadorCodBarras(CodigoBarras);
  Insert(DigitoCodBarra, CodigoBarras, 5);
  FBoleto.SetCodigoBarras(CodigoBarras);
  Result := Self;
end;

function TGeraBoletoBuilder.FormataLinhaDigitavel: IGeraBoletoBuilder;
var
  Campos: Array[0..4] of string;
  Dv: string;
begin
  Campos[0] := FConta.Banco.Numero + MOEDA + Copy(FBoleto.GetCodigoBarras, 20, 5);
  Dv := Modulo10(Campos[0]);
  Campos[0] := Campos[0] + Dv;
  Insert('.', Campos[0], 6);

  Result := Self;
end;

function TGeraBoletoBuilder.FormataCampoLivre: IGeraBoletoBuilder;
begin
  FormatadorBanco.FormataCampoLivre;
  Result := Self;
end;

function TGeraBoletoBuilder.ValidaDados: IGeraBoletoBuilder;
begin
  FormatadorBanco.ValidaDados;
  Result := Self;
end;


end.
