unit TestFormata237;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, GeraBoleto.Base, GeraBoleto.Boleto, GeraBoleto.Funcoes, SysUtils;

type
  TestTFormata237 = class(TTestCase)
  strict private
    FBoleto: IBoleto;
    procedure SetDadosPadrao;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestDigitoDoNumeroDoBancoInvalido;
    procedure TestFormatacaoDoNumeroDaAgencia;
    procedure TestFormatacaoDoNumeroDaConta;
    procedure TestNumeroDaContaComCarectereInvalido;
    procedure TestFormatacaoCampoLivre;
    procedure TestDigitoVerificadorDoNossoNumero;
  end;

implementation

uses
  GeraBoleto.Conta, GeraBoleto.Titulo;

procedure TestTFormata237.SetDadosPadrao;
var
  Conta: TConta;
  Titulo: TTitulo;
begin
  Conta := FBoleto.GetConta;
  Conta.Banco.Numero := '237';
  Conta.Banco.DigitoNumero := '2';
  Conta.Agencia := '9999';
  Conta.DigitoAgencia := '9';
  Conta.Conta := '123456';
  Conta.DigitoConta := '1';
  Conta.Convenio := '1234567';
  Conta.SeqNossoNumero := 1;
  Conta.Carteira := '09';

  Titulo := FBoleto.GetTitulo;
  Titulo.Emissao := StrToDate('1/1/2019');
  Titulo.Vencto :=  StrToDate('30/05/2019');
  Titulo.EspecMoeda := '9';
  Titulo.EspecDoc := 'DM';
  Titulo.Aceite := 'N';
  Titulo.DataProc := StrToDate('1/1/2019');
  Titulo.Valor := 300.00;
end;

procedure TestTFormata237.SetUp;
begin
  FBoleto := TBoleto.Create;
  SetDadosPadrao;
end;

procedure TestTFormata237.TearDown;
begin
end;


procedure TestTFormata237.TestDigitoDoNumeroDoBancoInvalido;
begin
  StartExpectingException(Exception);
  FBoleto.GetConta.Banco.DigitoNumero := '8';
  FBoleto.Gerar;
  StopExpectingException('Nenhuma exceção gerada quando informado dígito do número do banco inválido');
end;

procedure TestTFormata237.TestDigitoVerificadorDoNossoNumero;
begin
  FBoleto.Gerar;

  CheckEquals('1', FBoleto.GetTitulo.DigitoNossoNum, 'Dígito Verificado do Nosso Número Inválido! Nosso Numero: ' +
   FBoleto.GetTitulo.NossoNum);
end;

procedure TestTFormata237.TestFormatacaoCampoLivre;
begin
  FBoleto.Gerar;
  CheckEquals('9999090000000000101234560', FBoleto.GetCampoLivre, 'Formatação do Campo Livre Inválido');
end;

procedure TestTFormata237.TestFormatacaoDoNumeroDaAgencia;
begin
  FBoleto.GetConta.Agencia := '123';
  FBoleto.Gerar;
  CheckEquals('0123', FBoleto.GetConta.Agencia, 'Agência com formato inválido!');
end;

procedure TestTFormata237.TestFormatacaoDoNumeroDaConta;
begin
  FBoleto.GetConta.Conta := '12345';
  FBoleto.Gerar;
  CheckEquals('0012345', FBoleto.GetConta.Conta, 'Formatação do número da conta inválido');
end;

procedure TestTFormata237.TestNumeroDaContaComCarectereInvalido;
begin
  StartExpectingException(Exception);
  FBoleto.GetConta.Conta := 'a123';
  FBoleto.Gerar;  StopExpectingException('Nenhuma exceção gerada quando informado caractere inválido na conta');end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFormata237.Suite);
end.

